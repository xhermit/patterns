依赖倒转原则(dependence inversion principle)

要依赖于抽象,不要依赖于具体. 


用书面语解释就是：
		高层模块不应该依赖底层模块。两个都应该依赖抽象。抽象不应该依赖细节，细节应该依赖于抽象。
		Abstractions should not depend upon details. Details should depend upon abstractions.

用行话解释就是：
		针对接口编程，不要针对实现编程。
		Program to an interface, not an implementation.

用土话解释就是：
		高层定义接口，底层实现接口。高层不要和具体的底层模块扯上关系。二者之间的关系就是接口，也就是抽象。
 		 所以说二者都依赖于抽象。只要接口稳定，高层底层想换哪个换哪个。

 		 
 		 依赖也就是耦合,分为下面三种
 		  1.零耦合(Nil Coupling)关系,两个类没有依赖关系,那就是零耦合. 

         2.具体耦合(Concrete Coupling)关系,两个具体的类之间有依赖关系,那么就是具体耦合关系,如果一个具体类直接引用另外一个具体类,就会发生这种关系. 

         3.抽象耦合(Abstract Coupling)关系.这种关系发生在一个具体类和一个抽象类之间,这样就使必须发生关系的类之间保持最大的灵活性. 
程序在需要引用一个对象时,应当尽可能的使用抽象类型作为变量的静态类型,这就是针对接口编程的含义. DIP是达到"开-闭"原则的途径.
要做到DIP,用抽象方式耦合是关键.由于一个抽象耦合总要涉及具体类从抽象类继承.并且需要保证在任何引用到某类的地方都可以改换成其子类
,因此,LSP是DIP的基础.DIP是OOD的核心原则,设计模式的研究和应用都是用它作为指导原则的.DIP虽然强大,但是也很难实现.另外,DIP是假定所有的具体类都会变化,
这也不是全对,有些具体类就相当稳定.使用这个类的客户端就完全可以依赖这个具体类而不用再弄一个抽象类.



 		 